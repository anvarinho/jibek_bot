import logging
import os
from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
from aiogram import Bot, types
from time import sleep
import texts

TOKEN = os.getenv('TOKEN')
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

HEROKU_APP_NAME = os.getenv('PROJECT_NAME')

# webhook settings
WEBHOOK_HOST = f'https://{HEROKU_APP_NAME}.herokuapp.com'
WEBHOOK_PATH = f'/webhook/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = os.getenv('PORT', default=8000)


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    #keyboard = types.ReplyKeyboardMarkup()
    #button_1 = types.KeyboardButton(text="–° –ø—é—Ä–µ—à–∫–æ–π")
    #keyboard.add(button_1)
    #button_2 = "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏"
    #keyboard.add(button_2)
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    services = types.KeyboardButton(texts.services)
    address = types.KeyboardButton(texts.address)
    contacts = types.KeyboardButton(texts.contacts)
    about = types.KeyboardButton(texts.about_me)
    text = f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b> ‚ò∫Ô∏è\n–Ø –ß–∞—Ç-–ë–æ—Ç –ñ–∏–±–µ–∫ ü§ñ!'
    keyboard.add(services, address, contacts, about)
    photo = open("kitten3.jpg", "rb")

    await message.answer(text, reply_markup=keyboard, parse_mode="html")
    sleep(0.5)
    await message.answer_photo(photo)
    sleep(0.5)
    await message.answer("–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?")

@dp.message_handler()
async def echo(message: types.Message):
    if message.text == texts.back:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        services = types.KeyboardButton(texts.services)
        address = types.KeyboardButton(texts.address)
        contacts = types.KeyboardButton(texts.contacts)
        about = types.KeyboardButton(texts.about_me)
        markup.add(services, address, contacts, about)
        photo = open("kitten3.jpg", "rb")
        await message.answer_photo(photo)
        sleep(0.5)
        await message.answer("–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=markup)

    elif message.text == texts.services:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        lashes = types.KeyboardButton(texts.lashes)
        brows = types.KeyboardButton(texts.brows)
        markup.add(lashes, brows)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —É—Å–ª—É–≥:", reply_markup=markup)

    elif message.text == texts.brows:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(texts.pm_main)
        corr = types.KeyboardButton(texts.pm_corr)
        rem = types.KeyboardButton(texts.remove_pm)
        notice = types.KeyboardButton(texts.notice)
        markup.add(main, corr, rem, notice)
        await message.answer("–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂ –±—Ä–æ–≤–µ–π.\n–í–∏–¥—ã —É—Å–ª—É–≥:", reply_markup=markup)

    elif message.text == texts.lashes:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(texts.classic)
        one_five = types.KeyboardButton(texts.one_five)
        two = types.KeyboardButton(texts.two)
        two_five = types.KeyboardButton(texts.two_five)
        three = types.KeyboardButton(texts.three)
        hollywood = types.KeyboardButton(texts.hollywood)
        extra = types.KeyboardButton(texts.extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer("–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü.\n–í–∏–¥—ã —É—Å–ª—É–≥:", reply_markup=markup)

    elif message.text == texts.contacts:
        markup = types.InlineKeyboardMarkup(row_width=1)
        instagram = types.InlineKeyboardButton("–ú–æ–π Instagram üì∏", url="https://instagram.com/browbarmsk")
        whatsapp = types.InlineKeyboardButton("–ú–æ–π WhatsApp üì±", url="https://wa.me/79999788423")
        telegram = types.InlineKeyboardButton("–ú–æ–π Telegram üì≤", url="https://t.me/dokbaeva")
        markup.add(instagram, whatsapp, telegram)
        await message.answer(texts.CONTACTS, reply_markup=markup)

    elif message.text == texts.address:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ú–∞—Ä—à—Ä—É—Ç üó∫", "https://go.2gis.com/08fgl"))
        await message.answer(texts.ADDRESS, reply_markup=markup)

    elif message.text == texts.about_me:
        await message.answer(texts.ABOUT_ME)

    elif message.text == texts.extra:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(texts.curve_l)
        curve_m = types.KeyboardButton(texts.curve_m)
        spec_wide = types.KeyboardButton(texts.spec_wide)
        fixer = types.KeyboardButton(texts.fixer)
        effect = types.KeyboardButton(texts.kylie_effect)
        remove = types.KeyboardButton(texts.remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:", reply_markup=markup)

    elif message.text == texts.pm_main:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(texts.services)
        corr = types.KeyboardButton(texts.pm_corr)
        rem = types.KeyboardButton(texts.remove_pm)
        notice = types.KeyboardButton(texts.notice)
        markup.add(main, corr, rem, notice)
        await message.answer(texts.PM_MAIN, reply_markup=markup)

    elif message.text == texts.pm_corr:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(texts.pm_main)
        corr = types.KeyboardButton(texts.services)
        rem = types.KeyboardButton(texts.remove_pm)
        notice = types.KeyboardButton(texts.notice)
        markup.add(main, corr, rem, notice)
        await message.answer(texts.PM_CORR, reply_markup=markup)

    elif message.text == texts.remove_pm:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(texts.pm_main)
        corr = types.KeyboardButton(texts.pm_corr)
        rem = types.KeyboardButton(texts.services)
        notice = types.KeyboardButton(texts.notice)
        markup.add(main, corr, rem, notice)
        await message.answer(texts.REMOVE_PM, reply_markup=markup)

    elif message.text == texts.notice:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(texts.pm_main)
        corr = types.KeyboardButton(texts.pm_corr)
        rem = types.KeyboardButton(texts.remove_pm)
        notice = types.KeyboardButton(texts.services)
        markup.add(main, corr, rem, notice)
        await message.answer(texts.NOTICE,reply_markup=markup)
    
    elif message.text == texts.classic:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(texts.services)
        one_five = types.KeyboardButton(texts.one_five)
        two = types.KeyboardButton(texts.two)
        two_five = types.KeyboardButton(texts.two_five)
        three = types.KeyboardButton(texts.three)
        hollywood = types.KeyboardButton(texts.hollywood)
        extra = types.KeyboardButton(texts.extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(texts.CLASSIC, reply_markup=markup)

    elif message.text == texts.one_five:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(texts.classic)
        one_five = types.KeyboardButton(texts.services)
        two = types.KeyboardButton(texts.two)
        two_five = types.KeyboardButton(texts.two_five)
        three = types.KeyboardButton(texts.three)
        hollywood = types.KeyboardButton(texts.hollywood)
        extra = types.KeyboardButton(texts.extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(texts.ONE_FIVE, reply_markup=markup)

    elif message.text == texts.two:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(texts.classic)
        one_five = types.KeyboardButton(texts.one_five)
        two = types.KeyboardButton(texts.services)
        two_five = types.KeyboardButton(texts.two_five)
        three = types.KeyboardButton(texts.three)
        hollywood = types.KeyboardButton(texts.hollywood)
        extra = types.KeyboardButton(texts.extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(texts.TWO, reply_markup=markup)

    elif message.text == texts.two_five:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(texts.classic)
        one_five = types.KeyboardButton(texts.one_five)
        two = types.KeyboardButton(texts.two)
        two_five = types.KeyboardButton(texts.services)
        three = types.KeyboardButton(texts.three)
        hollywood = types.KeyboardButton(texts.hollywood)
        extra = types.KeyboardButton(texts.extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(texts.TWO_FIVE, reply_markup=markup)

    elif message.text == texts.three:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(texts.classic)
        one_five = types.KeyboardButton(texts.one_five)
        two = types.KeyboardButton(texts.two)
        two_five = types.KeyboardButton(texts.two_five)
        three = types.KeyboardButton(texts.services)
        hollywood = types.KeyboardButton(texts.hollywood)
        extra = types.KeyboardButton(texts.extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(texts.THREE, reply_markup=markup)

    elif message.text == texts.hollywood:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(texts.classic)
        one_five = types.KeyboardButton(texts.one_five)
        two = types.KeyboardButton(texts.two)
        two_five = types.KeyboardButton(texts.two_five)
        three = types.KeyboardButton(texts.three)
        hollywood = types.KeyboardButton(texts.services)
        extra = types.KeyboardButton(texts.extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(texts.HOLLYWOOD, reply_markup=markup)

    elif message.text == texts.curve_l:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(texts.back)
        curve_m = types.KeyboardButton(texts.curve_m)
        spec_wide = types.KeyboardButton(texts.spec_wide)
        fixer = types.KeyboardButton(texts.fixer)
        effect = types.KeyboardButton(texts.kylie_effect)
        remove = types.KeyboardButton(texts.remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(texts.CURVE_L, reply_markup=markup)

    elif message.text == texts.curve_m:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(texts.curve_l)
        curve_m = types.KeyboardButton(texts.back)
        spec_wide = types.KeyboardButton(texts.spec_wide)
        fixer = types.KeyboardButton(texts.fixer)
        effect = types.KeyboardButton(texts.kylie_effect)
        remove = types.KeyboardButton(texts.remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(texts.CURVE_M, reply_markup=markup)

    elif message.text == texts.spec_wide:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(texts.curve_l)
        curve_m = types.KeyboardButton(texts.curve_m)
        spec_wide = types.KeyboardButton(texts.back)
        fixer = types.KeyboardButton(texts.fixer)
        effect = types.KeyboardButton(texts.kylie_effect)
        remove = types.KeyboardButton(texts.remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(texts.SPEC_WIDE, reply_markup=markup)

    elif message.text == texts.fixer:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(texts.curve_l)
        curve_m = types.KeyboardButton(texts.curve_m)
        spec_wide = types.KeyboardButton(texts.spec_wide)
        fixer = types.KeyboardButton(texts.back)
        effect = types.KeyboardButton(texts.kylie_effect)
        remove = types.KeyboardButton(texts.remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(texts.FIXER, reply_markup=markup)

    elif message.text == texts.kylie_effect:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(texts.curve_l)
        curve_m = types.KeyboardButton(texts.curve_m)
        spec_wide = types.KeyboardButton(texts.spec_wide)
        fixer = types.KeyboardButton(texts.fixer)
        effect = types.KeyboardButton(texts.back)
        remove = types.KeyboardButton(texts.remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(texts.KYLIE_EFFECT, reply_markup=markup)

    elif message.text == texts.remove_lashes:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(texts.curve_l)
        curve_m = types.KeyboardButton(texts.curve_m)
        spec_wide = types.KeyboardButton(texts.spec_wide)
        fixer = types.KeyboardButton(texts.fixer)
        effect = types.KeyboardButton(texts.kylie_effect)
        remove = types.KeyboardButton(texts.back)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(texts.REMOVE_LASHES, reply_markup=markup)

    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        instagram = types.InlineKeyboardButton("–ú–æ–π Instagram üì∏", "https://instagram.com/browbarmsk")
        whatsapp = types.InlineKeyboardButton("–ú–æ–π WhatsApp", url="https://wa.me/79999788423")
        telegram = types.InlineKeyboardButton("–ú–æ–π Telegram", url="https://t.me/dokbaeva")
        markup.add(instagram, whatsapp, telegram)
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤–≤–∏–¥—Éü•∫\n–ù–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ ‚¨áÔ∏è", reply_markup=markup)


    
    #await bot.send_message(message.chat.id, message.text)
    #await message.answer(message.text.upper())



#@dp.message_handler(Text(equals="–° –ø—é—Ä–µ—à–∫–æ–π"))
#async def with_puree(message: types.Message):
#    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=types.ReplyKeyboardRemove())
#
#@dp.message_handler(lambda message: message.text == "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏")
#async def without_puree(message: types.Message):
#    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())

#@dp.message_handler(commands='starts')
#async def send_welcome(message: types.Message):
 #   """
  #  This handler will be called when user sends `/start` or `/help` command
#    """
   # await message.reply("Hi!\nI'm EchoBot!\nPowered by aiogram.")
#    buttons = [
#        types.InlineKeyboardButton(text="GitHub", url="https://github.com"),
#        types.InlineKeyboardButton(text="–û—Ñ. –∫–∞–Ω–∞–ª Telegram", url="tg://resolve?domain=telegram"),
#    ]
#    keyboard = types.InlineKeyboardMarkup(row_width=1)
#    keyboard.add(*buttons)
#    await message.answer("Hi Friend! How can I help you?", reply_markup=keyboard)
#
#@dp.message_handler(commands="starts")
#async def cmd_start(message: types.Message):
#    keyboard = types.ReplyKeyboardMarkup()
#    button_1 = types.KeyboardButton(text="–° –ø—é—Ä–µ—à–∫–æ–π")
#    keyboard.add(button_1)
#    button_2 = "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏"
#    keyboard.add(button_2)
#    await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)




if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )