import logging
import os
from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
from aiogram import Bot, types
from time import sleep

TOKEN = os.getenv('TOKEN')
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

HEROKU_APP_NAME = os.getenv('PROJECT_NAME')

# webhook settings
WEBHOOK_HOST = f'https://{HEROKU_APP_NAME}.herokuapp.com'
WEBHOOK_PATH = f'/webhook/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = os.getenv('PORT', default=8000)


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    #keyboard = types.ReplyKeyboardMarkup()
    #button_1 = types.KeyboardButton(text="–° –ø—é—Ä–µ—à–∫–æ–π")
    #keyboard.add(button_1)
    #button_2 = "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏"
    #keyboard.add(button_2)
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    services = types.KeyboardButton(services)
    address = types.KeyboardButton(address)
    contacts = types.KeyboardButton(contacts)
    about = types.KeyboardButton(about_me)
    text = f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b> ‚ò∫Ô∏è\n–Ø –ß–∞—Ç-–ë–æ—Ç –ñ–∏–±–µ–∫ ü§ñ!'
    keyboard.add(services, address, contacts, about)
    photo = open("kitten3.jpg", "rb")

    await message.answer(text, reply_markup=keyboard, parse_mode="html")
    sleep(0.5)
    await message.answer_photo(photo)
    sleep(0.5)
    await message.answer("–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?")

@dp.message_handler()
async def echo(message: types.Message):
    if message.text == back:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        services = types.KeyboardButton(services)
        address = types.KeyboardButton(address)
        contacts = types.KeyboardButton(contacts)
        about = types.KeyboardButton(about_me)
        markup.add(services, address, contacts, about)
        photo = open("kitten3.jpg", "rb")
        await message.answer_photo(photo)
        sleep(0.5)
        await message.answer("–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=markup)

    elif message.text == services:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        lashes = types.KeyboardButton(lashes)
        brows = types.KeyboardButton(brows)
        markup.add(lashes, brows)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —É—Å–ª—É–≥:", reply_markup=markup)

    elif message.text == brows:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(pm_main)
        corr = types.KeyboardButton(pm_corr)
        rem = types.KeyboardButton(remove_pm)
        notice = types.KeyboardButton(notice)
        markup.add(main, corr, rem, notice)
        await message.answer("–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂ –±—Ä–æ–≤–µ–π.\n–í–∏–¥—ã —É—Å–ª—É–≥:", reply_markup=markup)

    elif message.text == lashes:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(classic)
        one_five = types.KeyboardButton(one_five)
        two = types.KeyboardButton(two)
        two_five = types.KeyboardButton(two_five)
        three = types.KeyboardButton(three)
        hollywood = types.KeyboardButton(hollywood)
        extra = types.KeyboardButton(extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer("–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü.\n–í–∏–¥—ã —É—Å–ª—É–≥:", reply_markup=markup)

    elif message.text == contacts:
        markup = types.InlineKeyboardMarkup(row_width=1)
        instagram = types.InlineKeyboardButton("–ú–æ–π Instagram üì∏", url="https://instagram.com/browbarmsk")
        whatsapp = types.InlineKeyboardButton("–ú–æ–π WhatsApp üì±", url="https://wa.me/79999788423")
        telegram = types.InlineKeyboardButton("–ú–æ–π Telegram üì≤", url="https://t.me/dokbaeva")
        markup.add(instagram, whatsapp, telegram)
        await message.answer(CONTACTS, reply_markup=markup)

    elif message.text == address:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ú–∞—Ä—à—Ä—É—Ç üó∫", "https://go.2gis.com/08fgl"))
        await message.answer(ADDRESS, reply_markup=markup)

    elif message.text == about_me:
        await message.answer(ABOUT_ME)

    elif message.text == extra:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(curve_l)
        curve_m = types.KeyboardButton(curve_m)
        spec_wide = types.KeyboardButton(spec_wide)
        fixer = types.KeyboardButton(fixer)
        effect = types.KeyboardButton(kylie_effect)
        remove = types.KeyboardButton(remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:", reply_markup=markup)

    elif message.text == pm_main:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(services)
        corr = types.KeyboardButton(pm_corr)
        rem = types.KeyboardButton(remove_pm)
        notice = types.KeyboardButton(notice)
        markup.add(main, corr, rem, notice)
        await message.answer(PM_MAIN, reply_markup=markup)

    elif message.text == pm_corr:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(pm_main)
        corr = types.KeyboardButton(services)
        rem = types.KeyboardButton(remove_pm)
        notice = types.KeyboardButton(notice)
        markup.add(main, corr, rem, notice)
        await message.answer(PM_CORR, reply_markup=markup)

    elif message.text == remove_pm:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(pm_main)
        corr = types.KeyboardButton(pm_corr)
        rem = types.KeyboardButton(services)
        notice = types.KeyboardButton(notice)
        markup.add(main, corr, rem, notice)
        await message.answer(REMOVE_PM, reply_markup=markup)

    elif message.text == notice:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        main = types.KeyboardButton(pm_main)
        corr = types.KeyboardButton(pm_corr)
        rem = types.KeyboardButton(remove_pm)
        notice = types.KeyboardButton(services)
        markup.add(main, corr, rem, notice)
        await message.answer(NOTICE,reply_markup=markup)
    
    elif message.text == classic:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(services)
        one_five = types.KeyboardButton(one_five)
        two = types.KeyboardButton(two)
        two_five = types.KeyboardButton(two_five)
        three = types.KeyboardButton(three)
        hollywood = types.KeyboardButton(hollywood)
        extra = types.KeyboardButton(extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(CLASSIC, reply_markup=markup)

    elif message.text == one_five:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(classic)
        one_five = types.KeyboardButton(services)
        two = types.KeyboardButton(two)
        two_five = types.KeyboardButton(two_five)
        three = types.KeyboardButton(three)
        hollywood = types.KeyboardButton(hollywood)
        extra = types.KeyboardButton(extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(ONE_FIVE, reply_markup=markup)

    elif message.text == two:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(classic)
        one_five = types.KeyboardButton(one_five)
        two = types.KeyboardButton(services)
        two_five = types.KeyboardButton(two_five)
        three = types.KeyboardButton(three)
        hollywood = types.KeyboardButton(hollywood)
        extra = types.KeyboardButton(extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(TWO, reply_markup=markup)

    elif message.text == two_five:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(classic)
        one_five = types.KeyboardButton(one_five)
        two = types.KeyboardButton(two)
        two_five = types.KeyboardButton(services)
        three = types.KeyboardButton(three)
        hollywood = types.KeyboardButton(hollywood)
        extra = types.KeyboardButton(extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(TWO_FIVE, reply_markup=markup)

    elif message.text == three:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(classic)
        one_five = types.KeyboardButton(one_five)
        two = types.KeyboardButton(two)
        two_five = types.KeyboardButton(two_five)
        three = types.KeyboardButton(services)
        hollywood = types.KeyboardButton(hollywood)
        extra = types.KeyboardButton(extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(THREE, reply_markup=markup)

    elif message.text == hollywood:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        classic = types.KeyboardButton(classic)
        one_five = types.KeyboardButton(one_five)
        two = types.KeyboardButton(two)
        two_five = types.KeyboardButton(two_five)
        three = types.KeyboardButton(three)
        hollywood = types.KeyboardButton(services)
        extra = types.KeyboardButton(extra)
        markup.add(classic, one_five, two, two_five, three, hollywood, extra)
        await message.answer(HOLLYWOOD, reply_markup=markup)

    elif message.text == curve_l:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(back)
        curve_m = types.KeyboardButton(curve_m)
        spec_wide = types.KeyboardButton(spec_wide)
        fixer = types.KeyboardButton(fixer)
        effect = types.KeyboardButton(kylie_effect)
        remove = types.KeyboardButton(remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(CURVE_L, reply_markup=markup)

    elif message.text == curve_m:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(curve_l)
        curve_m = types.KeyboardButton(back)
        spec_wide = types.KeyboardButton(spec_wide)
        fixer = types.KeyboardButton(fixer)
        effect = types.KeyboardButton(kylie_effect)
        remove = types.KeyboardButton(remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(CURVE_M, reply_markup=markup)

    elif message.text == spec_wide:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(curve_l)
        curve_m = types.KeyboardButton(curve_m)
        spec_wide = types.KeyboardButton(back)
        fixer = types.KeyboardButton(fixer)
        effect = types.KeyboardButton(kylie_effect)
        remove = types.KeyboardButton(remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(SPEC_WIDE, reply_markup=markup)

    elif message.text == fixer:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(curve_l)
        curve_m = types.KeyboardButton(curve_m)
        spec_wide = types.KeyboardButton(spec_wide)
        fixer = types.KeyboardButton(back)
        effect = types.KeyboardButton(kylie_effect)
        remove = types.KeyboardButton(remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(FIXER, reply_markup=markup)

    elif message.text == kylie_effect:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(curve_l)
        curve_m = types.KeyboardButton(curve_m)
        spec_wide = types.KeyboardButton(spec_wide)
        fixer = types.KeyboardButton(fixer)
        effect = types.KeyboardButton(back)
        remove = types.KeyboardButton(remove_lashes)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(KYLIE_EFFECT, reply_markup=markup)

    elif message.text == remove_lashes:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        curve_l = types.KeyboardButton(curve_l)
        curve_m = types.KeyboardButton(curve_m)
        spec_wide = types.KeyboardButton(spec_wide)
        fixer = types.KeyboardButton(fixer)
        effect = types.KeyboardButton(kylie_effect)
        remove = types.KeyboardButton(back)
        markup.add(curve_l, curve_m, spec_wide, fixer, effect, remove)
        await message.answer(REMOVE_LASHES, reply_markup=markup)

    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        instagram = types.InlineKeyboardButton("–ú–æ–π Instagram üì∏", "https://instagram.com/browbarmsk")
        whatsapp = types.InlineKeyboardButton("–ú–æ–π WhatsApp", url="https://wa.me/79999788423")
        telegram = types.InlineKeyboardButton("–ú–æ–π Telegram", url="https://t.me/dokbaeva")
        markup.add(instagram, whatsapp, telegram)
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤–≤–∏–¥—Éü•∫\n–ù–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ ‚¨áÔ∏è", reply_markup=markup)


    
    #await bot.send_message(message.chat.id, message.text)
    #await message.answer(message.text.upper())



#@dp.message_handler(Text(equals="–° –ø—é—Ä–µ—à–∫–æ–π"))
#async def with_puree(message: types.Message):
#    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=types.ReplyKeyboardRemove())
#
#@dp.message_handler(lambda message: message.text == "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏")
#async def without_puree(message: types.Message):
#    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())

#@dp.message_handler(commands='starts')
#async def send_welcome(message: types.Message):
 #   """
  #  This handler will be called when user sends `/start` or `/help` command
#    """
   # await message.reply("Hi!\nI'm EchoBot!\nPowered by aiogram.")
#    buttons = [
#        types.InlineKeyboardButton(text="GitHub", url="https://github.com"),
#        types.InlineKeyboardButton(text="–û—Ñ. –∫–∞–Ω–∞–ª Telegram", url="tg://resolve?domain=telegram"),
#    ]
#    keyboard = types.InlineKeyboardMarkup(row_width=1)
#    keyboard.add(*buttons)
#    await message.answer("Hi Friend! How can I help you?", reply_markup=keyboard)
#
#@dp.message_handler(commands="starts")
#async def cmd_start(message: types.Message):
#    keyboard = types.ReplyKeyboardMarkup()
#    button_1 = types.KeyboardButton(text="–° –ø—é—Ä–µ—à–∫–æ–π")
#    keyboard.add(button_1)
#    button_2 = "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏"
#    keyboard.add(button_2)
#    await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)




if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )



start = "/start"

back = "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è"

brows = "–ë—Ä–æ–≤–∏ üòå"

lashes = "–†–µ—Å–Ω–∏—Ü—ã üëÅ"

services = "–í–∏–¥—ã –£—Å–ª—É–≥ üìú"

address = "–ê–¥—Ä–µ—Å üèõ"

ADDRESS = f"–ú–æ—Å–∫–≤–∞, –º–µ—Ç—Ä–æ –∏ –ú–¶–ö –î—É–±—Ä–æ–≤–∫–∞, \n—É–ª. –®–∞—Ä–∏–∫–æ–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤—Å–∫–∞—è, 2Ô∏è‚É£2Ô∏è‚É£,\n–ø–æ–¥—ä–µ–∑–¥ 5Ô∏è‚É£,\n–∫–æ–¥ –ø–æ–¥—ä–µ–∑–¥–∞(5Ô∏è‚É£üîë1Ô∏è‚É£9Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£),\n4Ô∏è‚É£ —ç—Ç–∞–∂,\n–¥–≤–µ—Ä—å üö™5Ô∏è‚É£4Ô∏è‚É£2Ô∏è‚É£"

contacts = "–ö–æ–Ω—Ç–∞–∫—Ç—ã üì±"

CONTACTS = "–ú–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +79999788423 (–ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –¥–æ—Å—Ç—É–ø–µ–Ω WhatsApp –∏ Telegram). –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–∏—Ö —Ä–∞–±–æ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º (–∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ VPN üòÅ)"

about_me = "–û–±–æ –º–Ω–µ üì†"

ABOUT_ME = "–ü—Ä–∏–≤–µ—Ç‚úåÔ∏è, —è –ñ–∏–±–µ–∫ (–º–æ–∂–Ω–æ –ñ–µ–Ω—è –µ—Å–ª–∏ —Å–ª–æ–∂–Ω–æüòÇ) —Ç–≤–æ–π –º–∞—Å—Ç–µ—Ä –ø–æ –±—Ä–æ–≤—è–º –∏ —Ä–µ—Å–Ω–∏—á–∫–∞–º. –°–¥–µ–ª–∞—é –≤–∞—à –≤–∑–≥–ª—è–¥ —ç—Ñ—Ñ–µ–∫—Ç–Ω–µ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µüòå. –ê –±—Ä–æ–≤–∫–∏ –∫–∞–∫ —Å –æ–±–ª–æ–∂–∫–∏ –≥–ª—è–Ω—Ü–µ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞üòé."

pm_main = "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞"

PM_MAIN = "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ü–ú –±—Ä–æ–≤–µ–π - –º–∞—Å—Ç–µ—Ä  —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–º –ø—Ä–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è, –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∏ —Ä–∏—Å—É–µ—Ç —ç—Å–∫–∏–∑ –≤–∞—à–∏—Ö –±—É–¥—É—â–∏—Ö –±—Ä–æ–≤–µ–π, –∏—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –º–æ–¥–µ–ª–∏. –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –æ—Ç—Ç–µ–Ω–æ–∫ –ø–∏–≥–º–µ–Ω—Ç–∞ —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –Ω–∞–ø—ã–ª–µ–Ω–∏—è‚ö°Ô∏è ...."

pm_corr = "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è"

PM_CORR = "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è - –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ 28 –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–∂–∏. –û–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–∏–≥–º–µ–Ω—Ç–∞ –Ω–∞ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫üí•."

remove_pm = "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"

REMOVE_PM = "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ç–∞—Ç—É–∞–∂–∞."

notice = "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"

NOTICE = "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –Ω–∞–ø—ã–ª–µ–Ω–∏—è –±—Ä–æ–≤–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—É—Ç—ë–º –≤–≤–µ–¥–µ–Ω–∏—è –ø–∏–≥–º–µ–Ω—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –∫–æ–∂–∏ —Ç–æ–Ω–∫–∏–º–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º–∏ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞–º–∏ (–∏–≥–ª–∞–º–∏). –ü–æ—ç—Ç–æ–º—É –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–∂–Ω—ã–º –ø–æ–∫—Ä–æ–≤–æ–º (–≤—Å–µ –≤–∏–¥—ã –∞–ª–ª–µ—Ä–≥–∏–∏),üõë —Å–≤—ë—Ä—Ç—ã–≤–∞–µ–º–æ—Å—Ç—å—é –∫—Ä–æ–≤–∏ (–í–ò–ß, –°–ü–ò–î, —Å–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç),‚õîÔ∏è –ø–æ–∑–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏.‚õîÔ∏è –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –¥–≤–∞ —ç—Ç–∞–ø–∞, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫.üåû"

lashes_procedure = ""

classic = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ üñ§"

CLASSIC = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ üå∏ - –∫ –∫–∞–∂–¥–æ–π —Ä–æ–¥–Ω–æ–π —Ä–µ—Å–Ω–∏—á–∫–µ –º—ã –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–¥–Ω—É –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Å–Ω–∏—á–∫—É üòä, —Ç–µ–º —Å–∞–º—ã–º –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–≥–∫–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ–º –≤–∞—à–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Ä–µ—Å–Ω–∏—Ü—ã....."

one_five = "1Ô∏è‚É£.5Ô∏è‚É£D üíÑ"

ONE_FIVE = "–û–±—ä—ë–º 1Ô∏è‚É£.5Ô∏è‚É£D üòá - —ç—Ç–æ —Å–ø–æ—Å–æ–± –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è —Ä–µ—Å–Ω–∏—Ü, –≥–¥–µ –º—ã —á–µ—Ä–µ–¥—É–µ–º –ø—É—á–æ–∫ –∏–∑ –¥–≤—É—Ö —Ä–µ—Å–Ω–∏—Ü –∏ –æ–¥–Ω—É –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é, —Ç–∞–∫–∂–µ –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —É–≥–æ–ª –≥–ª–∞–∑ –∏ —Å—Ç–∞–≤–∏—Ç—å –ø—É—á–∫–∏ —Ç–æ–ª—å–∫–æ —Ç–∞–º ü•∞....."

two = "2Ô∏è‚É£D üíã"

TWO = "–û–±—ä—ë–º 2Ô∏è‚É£D üî• (—Å–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ) -  –∫ –∫–∞–∂–¥–æ–π —Ä–æ–¥–Ω–æ–π —Ä–µ—Å–Ω–∏—á–∫–µ –º—ã –∫–ª–µ–∏–º –¥–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—Å–Ω–∏—á–∫–∏, —Å–æ–∑–¥–∞–≤–∞—è –∏–∑ –Ω–∏—Ö –ø—É—á–æ–∫ (–≤—Ä—É—á–Ω—É—é) —Ç–µ–º —Å–∞–º—ã–º —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–æ–¥–Ω—ã—Ö —Ä–µ—Å–Ω–∏—Ü –≤ –¥–≤–∞ —Ä–∞–∑–∞ü•∞......."

two_five = "2Ô∏è‚É£.5Ô∏è‚É£D ‚ù§Ô∏è‚Äçüî•"

TWO_FIVE = "–û–±—ä—ë–º 2Ô∏è‚É£.5Ô∏è‚É£D üèµ - –≤ —ç—Ç–æ–º –≤–∏–¥–µ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è –º—ã —á–µ—Ä–µ–¥—É–µ–º –ø—É—á–∫–∏ –∏–∑ –¥–≤—É—Ö –∏ —Ç—Ä—ë—Ö –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—Å–Ω–∏—Ü, —Ç–∞–∫–∂–µ –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —É–≥–æ–ª –≥–ª–∞–∑ –∏ –∫–ª–µ–∏—Ç—å —Ç—Ä–æ–π–Ω—ã–µ –ø—É—á–∫–∏ —Ç–æ–ª—å–∫–æ —Ç–∞–ºüßöüèΩ‚Äç‚ôÄÔ∏è ...."

three = "3Ô∏è‚É£D üçâ"

THREE = "–û–±—ä—ë–º 3Ô∏è‚É£D ‚ù§Ô∏è - –≤ —ç—Ç–æ–º –≤–∏–¥–µ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è –º—ã –ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ–º –ø—É—á–æ–∫ –∏–∑ —Ç—Ä—ë—Ö –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—Å–Ω–∏—Ü –∫ –∫–∞–∂–¥–æ–π —Ä–æ–¥–Ω–æ–π —Ä–µ—Å–Ω–∏—Ü–µ, –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∞–µ–º –ø—É—à–∏—Å—Ç—ã–µ –æ–±—ä—ë–º–Ω—ã–µ —Ä–µ—Å–Ω–∏—Ü—ã ü•≥ ......"

hollywood = "Hollywood ‚ú®"

HOLLYWOOD = "Hollywood ‚ù§Ô∏è - —Å–∞–º—ã–π –æ–±—ä—ë–º–Ω—ã–π –≤–∏–¥ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è –ø—É—á–∫–∞–º–∏ 4Ô∏è‚É£D-5Ô∏è‚É£D üòç......"

extra = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ üìú"

curve_l = "–ò–∑–≥–∏–± L"

CURVE_L = "–ò–∑–≥–∏–± L - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–∑–≥–∏–±–æ–≤ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ–º, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –ø–æ–¥–≤–æ–¥–æ–∫ –∏ —Å—Ç—Ä–µ–ª–æ–∫. –¢–∞–∫–∂–µ –µ–≥–æ –ø–æ–ª—é–±—è—Ç —Ç–µ –∫—Ç–æ –Ω–æ—Å–∏—Ç –æ—á–∫–∏üòç."

curve_m = "–ò–∑–≥–∏–± M"

CURVE_M = "–ò–∑–≥–∏–± M - –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è —Ç–µ—Ö —É –∫–æ–≥–æ –Ω–∞–≤–∏—Å—à–µ–µ –≤–µ–∫–æ –∏–ª–∏ –≥–ª—É–±–æ–∫–æ –ø–æ—Å–∞–∂–µ–Ω–Ω—ã–µ –≥–ª–∞–∑–∞....."

spec_wide = "–¢–æ–ª—â–∏–Ω–∞ 0.07"

SPEC_WIDE = "–¢–æ–ª—â–∏–Ω–∞ 0.07 - —Ç–æ–Ω–µ–Ω—å–∫–∏–µ, –Ω–µ–≤–µ—Å–æ–º—ã–µ –ª–µ–≥–∫–∏–µ —Ä–µ—Å–Ω–∏—Ü—ã –æ—á–µ–Ω—å —É–¥–æ–±–Ω—ã –¥–ª—è –æ–±—ä–µ–º–Ω–æ–≥–æ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –∏–º –º–æ–∂–Ω–æ –¥–æ–±–∏—Ç—å—Å—è –Ω–µ—Ä–µ–∞–ª—å–Ω–æ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞"

fixer = "–ó–∞–∫—Ä–µ–ø–∏—Ç–µ–ª—å"

FIXER = "–ó–∞–∫—Ä–µ–ø–∏—Ç–µ–ª—å –Ω–∞–Ω–æ—Å–∏—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ä–æ–∫ –Ω–æ—Å–∫–∏ –Ω–∞—Ä–∞—â–µ–Ω–Ω—ã—Ö —Ä–µ—Å–Ω–∏—Ü. –û–Ω —É—Å–∏–ª–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å—Ü–µ–ø–∫–∏ —Ä–æ–¥–Ω–æ–π –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Å–Ω–∏—á–∫–∏ üåû...."

kylie_effect = "–≠—Ñ—Ñ–µ–∫—Ç Kylie"

KYLIE_EFFECT = "–≠—Ñ—Ñ–µ–∫—Ç Kylie (–ª—É—á–∏–∫–∏) üåÖ - –≤ —Å—Ç–∏–ª–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –ö–∞–π–ª–∏ –î–∂–µ–Ω–Ω–µ—Ä. –í —Ç–∞–∫–æ–º —ç—Ñ—Ñ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–µ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–±—ã—á–Ω–æ–µ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á–∏–∫–∏ –¥–ª–∏–Ω–Ω–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è ‚ö°Ô∏è....."

remove_lashes = "–°–Ω—è—Ç–∏–µ —Ä–µ—Å–Ω–∏—Ü"

REMOVE_LASHES = "–ü—Ä–æ—Ü–µ—Å—Å —Å–Ω—è—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∫—Ä–µ–º–æ–≤—ã–º —Ä–µ–º—É–≤–µ—Ä–æ–º (—Å–∞–º—ã–π —â–∞–¥—è—â–∏–π —Ä–µ–º—É–≤–µ—Ä) –±–µ–∑ –∂–∂–µ–Ω–∏—è –∏ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞."
